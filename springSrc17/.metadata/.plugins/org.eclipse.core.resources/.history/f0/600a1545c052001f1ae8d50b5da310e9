package com.oracle.oBootBoard.dao;

import java.sql.Connection;
import java.sql.PreparedStatement;
import java.sql.ResultSet;
import java.sql.SQLException;
import java.sql.Timestamp;
import java.util.ArrayList;

import javax.sql.DataSource;

import org.springframework.jdbc.datasource.DataSourceUtils;
import org.springframework.stereotype.Repository;

import com.oracle.oBootBoard.dto.BDto;

//@Repository
public class JdbcDao implements BDao {
	//JDBC 사용
	private final DataSource dataSource;
	
	public JdbcDao(DataSource dataSource) {
		this.dataSource = dataSource;
	}
	
	private Connection getConnection() {
		return DataSourceUtils.getConnection(dataSource);
	}

	@Override
	public ArrayList<BDto> boardList() {
		ArrayList<BDto> bList = new ArrayList<BDto>();
		Connection conn = null;
		PreparedStatement pstmt = null;
		ResultSet rs = null;
		String sql = "SELECT * FROM mvc_board ORDER BY bGroup DESC, bStep ASC";
		
		System.out.println("BDao boardList start...");
		
		try {
			conn = getConnection();
			pstmt = conn.prepareStatement(sql);
			System.out.println("BDao sql->"+sql);
			rs = pstmt.executeQuery();
			
			while (rs.next()) {
//				int bId = rs.getInt("bId");
//				String bName = rs.getString("bName");
//				String bTitle = rs.getString("bTitle");
//				String bContent = rs.getString("bContent");
//				Timestamp bDate = rs.getTimestamp("bDate"));
//				int bHit = rs.getInt("bHit");
//				int bGroup = rs.getInt("bGroup");
//				int bStep = rs.getInt("bStep");
//				int bIndent = rs.getInt("bIndent");
//
				//생성자를 통해서 담는 방법
//				BDto dto = new BDto(bId, bName, bTitle, bContent, bDate, bHit,
//									bGroup, bStep, bIndent);
//				bList.add(dto);
				
				
				BDto bDto = new BDto();
				bDto.setbId(rs.getInt("bId"));
				bDto.setbName(rs.getString("bName"));
				bDto.setbTitle(rs.getString("bTitle"));
				bDto.setbContent(rs.getString("bContent"));
				bDto.setbDate(rs.getTimestamp("bDate"));
				bDto.setbHit(rs.getInt("bHit"));
				bDto.setbGroup(rs.getInt("bGroup"));
				bDto.setbStep(rs.getInt("bStep"));
				bDto.setbIndent(rs.getInt("bIndent"));
				bList.add(bDto);
			}
			return bList;
		} catch (Exception e) {
			System.out.println("list dataSource-->"+e.getMessage());
			throw new IllegalStateException(e);
		} finally {
			close(conn, pstmt, rs);
		}
	}
	private void close(Connection conn, PreparedStatement pstmt, ResultSet rs) {
		try {
			if (rs != null)	rs.close();
		} catch (Exception e) {
			e.printStackTrace();
		}
		
		try {
			if (pstmt != null)	pstmt.close();
		} catch (Exception e) {
			e.printStackTrace();
		}
		
		try {
			if (conn != null)	close(conn);
		} catch (Exception e) {
			e.printStackTrace();
		}
	}
	
	private void close(Connection conn) throws SQLException {
		DataSourceUtils.releaseConnection(conn, dataSource);
	}
	
	//과제
	@Override
	public BDto contentView(String strId) {
		BDto bDto = null;
		Connection conn = null;
		PreparedStatement pstmt = null;
		ResultSet rs = null;
		String sql = "SELECT * FROM mvc_board WHERE bId=?";
		try {
			upHit(strId);
		} catch (SQLException e) {
			e.printStackTrace();
		}
		
		try {
			conn = getConnection();
			pstmt = conn.prepareStatement(sql);
			pstmt.setInt(1, Integer.parseInt(strId));
			rs = pstmt.executeQuery();
			
			if (rs.next()) {
				bDto = new BDto();
				bDto.setbId(rs.getInt("bId"));
				bDto.setbName(rs.getString("bName"));
				bDto.setbTitle(rs.getString("bTitle"));
				bDto.setbContent(rs.getString("bContent"));
				bDto.setbDate(rs.getTimestamp("bDate"));
				bDto.setbHit(rs.getInt("bHit"));
				bDto.setbGroup(rs.getInt("bGroup"));
				bDto.setbStep(rs.getInt("bStep"));
				bDto.setbIndent(rs.getInt("bIndent"));
			}
		} catch (Exception e) {
			throw new IllegalStateException(e);
		} finally {
			close(conn, pstmt, rs);
		}
		return bDto;
	}
	
	public void upHit(String strId) throws SQLException {
		Connection conn = null;
		PreparedStatement pstmt = null;
		String sql = "UPDATE mvc_board SET bHit=bHit+1 WHERE bId=?";
		
		try {
			conn = getConnection();
			pstmt = conn.prepareStatement(sql);
			pstmt.setString(1, strId);
			
			int rn = pstmt.executeUpdate();
			
		} catch (Exception e) {
			e.printStackTrace();
		} finally {
			try {
				if (pstmt != null) pstmt.close();
				if (conn != null) conn.close();
			} catch (Exception e2) {
				e2.printStackTrace();
			}
		}
	}


	//modify DAO 방식
	@Override
	public void modify(int bId, String bName, String bTitle, String bContent) {
		Connection conn = null;
		PreparedStatement pstmt = null;
		int result = 0;
		String sql = "UPDATE mvc_board SET bName=?, bTitle=?, bContent=? WHERE bId=?";
		
		try {
			conn = getConnection();
			pstmt = conn.prepareStatement(sql);
			pstmt.setString(1, bName);
			pstmt.setString(2, bTitle);
			pstmt.setString(3, bContent);
			pstmt.setInt(4, bId);

			result = pstmt.executeUpdate();
			
		} catch (Exception e) {
			System.out.println(e.getMessage());
		} finally {
			try {
				if (pstmt != null) pstmt.close();
				if (conn != null) conn.close();
			} catch (Exception e2) {
				e2.printStackTrace();
			}
		}
	}
	
	//modify3 DTO 방식
	@Override
	public void modify3(BDto bDto) {
		Connection conn = null;
		PreparedStatement pstmt = null;
		int result = 0;
		String sql = "UPDATE mvc_board SET bName=?, bTitle=?, bContent=? WHERE bId=?";
		
		try {
			conn = getConnection();
			pstmt = conn.prepareStatement(sql);
			pstmt.setString(1, bDto.getbName());
			pstmt.setString(2, bDto.getbTitle());
			pstmt.setString(3, bDto.getbContent());
			pstmt.setInt(4, bDto.getbId());

			result = pstmt.executeUpdate();
			
		} catch (Exception e) {
			System.out.println(e.getMessage());
		} finally {
			try {
				if (pstmt != null) pstmt.close();
				if (conn != null) conn.close();
			} catch (Exception e2) {
				e2.printStackTrace();
			}
		}
		
	}

	@Override
	public void delete(int bId) {
		Connection conn = null;
		PreparedStatement pstmt = null;
		String sql = "DELETE FROM mvc_board WHERE bId=?";
		
		try {
			conn = getConnection();
			pstmt = conn.prepareStatement(sql);
			pstmt.setInt(1, bId);
			
			int rn = pstmt.executeUpdate();
		} catch (Exception e) {
			e.printStackTrace();
		} finally {
			try {
				if (pstmt != null) pstmt.close();
				if (conn != null) conn.close();
			} catch (Exception e2) {
				e2.printStackTrace();
			}
		}
		
	}

	@Override
	public void write(String bName, String bTitle, String bContent) {
		Connection conn = null;
		PreparedStatement pstmt = null;
		
		//원래는 한 번 sequence에서 nextval을 썼으면 못쓰는데(CURRVAL로 써야했음) 버전이 바뀌면서 똑같이 nextval로도 가능!
		String sql1 = "INSERT INTO mvc_board(bId, bName,bTitle,bContent, bHit, bGroup, bStep, bIndent, bDate) "
				+ "VALUES(mvc_board_seq.NEXTVAL,?,?,?,0,mvc_board_seq.CURRVAL,0,0,SYSDATE)";
		
		try {
			conn = getConnection();
			pstmt = conn.prepareStatement(sql1);
			pstmt.setString(1, bName);
			pstmt.setString(2, bTitle);
			pstmt.setString(3, bContent);
			
			int rn = pstmt.executeUpdate();
			
		} catch (Exception e) {
			e.printStackTrace();
		} finally {
			try {
				if (pstmt != null) pstmt.close();
				if (conn != null) conn.close();
			} catch (Exception e2) {
				e2.printStackTrace();
			}
		}
		
	}

	@Override
	public BDto reply_view(int strbId) {
		BDto dto = null;
		
		Connection conn = null;
		PreparedStatement pstmt = null;
		ResultSet rs = null;

		String sql = "SELECT * FROM mvc_board WHERE bId=?";
		System.out.println("DAO reply_view sql->"+sql);

		try {
			conn = getConnection();
			pstmt = conn.prepareStatement(sql);
			pstmt.setInt(1, strbId);
			rs = pstmt.executeQuery();
			
			if(rs.next()) {
				int bId = rs.getInt("bId");
				String bName = rs.getString("bName");
				String bTitle = rs.getString("bTitle");
				String bContent = rs.getString("bContent");
				Timestamp bDate = rs.getTimestamp("bDate");
				System.out.println("DAO reply_view bName->"+bName);
				System.out.println("DAO reply_view bTitle->"+bTitle);
				
				int bHit = rs.getInt("bHit");
				System.out.println("DAO reply_view bHit->"+bHit);
				int bGroup = rs.getInt("bGroup");
				System.out.println("DAO reply_view bGroup->"+bGroup);
				int bStep = rs.getInt("bStep");
				int bIndent = rs.getInt("bIndent");
				
				dto = new BDto(bId, bName, bTitle, bContent, bDate, bHit, bGroup, bStep, bIndent);
			}
			
		} catch (Exception e) {
			e.printStackTrace();
		} finally {
			try {
				if (rs != null) rs.close();
				if (pstmt != null) pstmt.close();
				if (conn != null) conn.close();
			} catch (Exception e2) {
				e2.printStackTrace();
			}
		}
		return dto;
		
	}

	@Override
	public BDto reply(int bId, String bName, String bTitle, String bContent, int bGroup, int bStep, int bIndent) {
		BDto bdto = new BDto();
		Connection conn = null;
		PreparedStatement pstmt = null;
		String sql = "INSERT INTO mvc_board(bId, bName, bTitle, bContent, bHit, bGroup, bStep, bIndent, bDate) "
				+ "VALUES(mvc_board_seq.NEXTVAL,?,?,?,0,?,?,?,SYSDATE)";
		
		replyShape(bGroup, bStep);
		
		try {
			conn = getConnection();
			pstmt = conn.prepareStatement(sql);
			pstmt.setString(1, bName);
			pstmt.setString(2, bTitle);
			pstmt.setString(3, bContent);
			pstmt.setInt(4, bGroup);
			pstmt.setInt(5, bStep+1);
			pstmt.setInt(6, bIndent+1);

			pstmt.executeUpdate();
			

		} catch (Exception e) {
			e.printStackTrace();
		}
		return bdto;
	}

	private void replyShape(int bGroup, int bStep) {
		BDto bdto = new BDto();
		Connection conn = null;
		PreparedStatement pstmt = null;
		
		String sql = "UPDATE mvc_board SET bStep = bStep+1 WHERE bGroup=? AND bStep > ?";
		
		try {
			 conn = getConnection();
			 pstmt = conn.prepareStatement(sql);
			 pstmt.setInt(1, bGroup);
			 pstmt.setInt(2, bStep);
			 pstmt.executeUpdate();
			 
			 bdto.setbStep(bdto.getbStep()+1);
			 bdto.setbIndent(bdto.getbIndent()+1);
			 
		} catch (Exception e) {
			e.printStackTrace();
		} finally {
			try {
				if (pstmt != null) pstmt.close();
				if (conn != null) conn.close();
			} catch (Exception e2) {
				e2.printStackTrace();
			}
		}
		
	}
	
	
}
