package com.oracle.oBootJpaApi01.controller;

import java.util.ArrayList;
import java.util.List;

import javax.naming.spi.DirStateFactory.Result;

import org.slf4j.Logger;
import org.slf4j.LoggerFactory;
import org.springframework.web.bind.annotation.GetMapping;
import org.springframework.web.bind.annotation.RequestMapping;
import org.springframework.web.bind.annotation.RestController;

import com.oracle.oBootJpaApi01.domain.Member;
import com.oracle.oBootJpaApi01.service.MemberService;

import lombok.AllArgsConstructor;
import lombok.Data;
import lombok.RequiredArgsConstructor;
import lombok.extern.slf4j.Slf4j;

//Controller + ResponseBody
@RestController
//private static final Logger logger = LoggerFactory.getLogger(JpaRestApiController.class);
@Slf4j
@RequiredArgsConstructor
public class JpaRestApiController {
	private final MemberService memberService;
	
	@RequestMapping("/helloText")
	public String helloText() {
		System.out.println("JpaRestApiController Start...");
		String hello = "안녕";
		// 		StringConverter
		return hello;
	}
	
	//Bad API
	@GetMapping("/restApi/v1/members")
	public List<Member> membersVer1() {
		System.out.println("JpaRestApiController /restApi//v1/members start...");
		//return return되어서 결국에는 listMember에 쌓일 것이다.
		List<Member> listMember = memberService.getListAllMember();
		System.out.println("JpaRestApiController /restApi//v1/members listMember.size() -> "+listMember.size());
		return listMember;
	}
	
	//Good API Easy Version
	//목표 : 이름 & 급여 만 전송
	@GetMapping("/restApi/v21/members")
	public Result membersVer21() {
		List<Member> fineMembers = memberService.getListAllMember();
		System.out.println("JpaRestApiController restApi/v21/members findMembers.size()-> "+fineMembers.size());
		
		//보내주는 Data의 List를 새로 만들었다. (넘어온 list 값이 과도하기 때문에)
		List<MemberRtnDto> resultList = new ArrayList<MemberRtnDto>();
		
		//이전 목적 : 반드시 필요한 Data만 보여준다. (외부 노출 최대한 금지)
		for(Member member: fineMembers) {
			MemberRtnDto memberRtnDto = new MemberRtnDto(member.getName(), member.getSal());
			System.out.println("/restApi/v21/members getName -> "+memberRtnDto.getName());
			System.out.println("/restApi/v21/members getSal -> "+memberRtnDto.getSal());
			resultList.add(memberRtnDto);
		}
		System.out.println("/restApi/v21/members resultList.size()"+resultList.size());
		return new Result<T>(resultList.size(), resultList);
	}
	
	@Data
	@AllArgsConstructor
	class Result<T> {
		private final int totCount;	//총 인원수 추가
		//들어오는 Data가 어떤 데이터형이든지 상관없이 T에 잡힌다.
		private final T data;
	}
	
	@Data
	@AllArgsConstructor
	class MemberRtnDto {
		//name과 sal만 뽑아서 data 전송해준다.
		private String name;
		private Long   sal;
	}
	
}
