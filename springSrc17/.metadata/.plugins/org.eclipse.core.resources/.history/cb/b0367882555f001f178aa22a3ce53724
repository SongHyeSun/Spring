package com.oracle.oBootMybatis01.handler;

import java.util.HashMap;

import org.json.simple.JSONObject;
import org.json.simple.parser.JSONParser;
import org.json.simple.parser.ParseException;
import org.springframework.stereotype.Component;
import org.springframework.web.socket.CloseStatus;
import org.springframework.web.socket.TextMessage;
import org.springframework.web.socket.WebSocketSession;
import org.springframework.web.socket.handler.TextWebSocketHandler;

//bean 으로 설정되어야 해서
@Component
public class SocketHandler extends TextWebSocketHandler {
	
	// 웹소켓 세션을 담아둘 맵 (연결될 session을 객체로 id별로 저장해두기 위한 것)
	HashMap<String, WebSocketSession> sessionMap = new HashMap<>();
	
	// 웹소켓 세션 ID과 Member을 담아둘 맵 
	HashMap<String, String> sessionUserMap = new HashMap<>();
	
	// 웹소켓 세션 ID과 Member을 담아둘 JSONObject
	JSONObject jsonUser = null;
	
	
	// 2. handleTextMessage 메소드는 메시지를 수신하면 실행
	//메세지 보낼 때
	@Override
	protected void handleTextMessage(WebSocketSession session, TextMessage message) throws Exception {
		// super.handleTextMessage(session, message);
		
		//Message 수신 (Payload : 프로토콜의 본문)
		String msg = message.getPayload();
		System.out.println("SocketHandler handleTextMessage msg-> "+msg);
		
		//string으로 받은 것을 json 형태로 파싱해주는 것!! (@RequestBody와 비슷한 역할)
		JSONObject jsonObj = jsonToObjectParser(msg);
		//type을 Get 하여 분기
		String msgType = (String) jsonObj.get("type");
		System.out.println("SocketHandler handleTextMessage msgType-> "+msgType);
		

	}
	
	// 1. 웹소켓 연결이 되면 동작
	//연결할 때
	@Override
	public void afterConnectionEstablished(WebSocketSession session) throws Exception {
		// TODO Auto-generated method stub
		System.out.println("SocketHandler afterConnectionEstablished Start...");
		
		// 웹소켓  연결이 되면 동작
		super.afterConnectionEstablished(session);
		//연결 소켓을 MAP에 등록
		sessionMap.put(session.getId(), session);
	}
	
	// 3. 웹소켓이 종료되면 동작
	//연결을 끊을 때 쓰는 method
	@Override
	public void afterConnectionClosed(WebSocketSession session, CloseStatus status) throws Exception {
		System.out.println("SocketHandler afterConnectionClosed Start...");
		//웹소켓 종료
		sessionMap.remove(session.getId());
		super.afterConnectionClosed(session, status);
	}
	
	//내부적으로 사용되는 parsing 하는 method
	// handleTextMessage 메소드에 JSON파일이 들어오면 파싱해주는 함수를 추가
	private static JSONObject jsonToObjectParser(String jsonStr) {
		JSONParser parser = new JSONParser();
		JSONObject jsonObj = null;
		try {
			jsonObj = (JSONObject) parser.parse(jsonStr);
		} catch (ParseException e) {
			System.out.println("SocketHandler JSONObject ParseException -> "+e.getMessage());
		}
		return jsonObj;
	}
}
